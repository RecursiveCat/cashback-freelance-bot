from keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import TeleBot


class CashbackBot:
	def __init__(self, token):
		'''–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram, SQL'''
		self.bot = TeleBot(token)
		'''—ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã, –æ–Ω–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É —è –¥–æ–±–∞–≤–∏–ª –µ–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞'''
		self.button_cancel = InlineKeyboardButton(text = "‚ùå", callback_data = "cancel")

		'''–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'''
		self.users_in_process = []

	def start_command(self, query, is_callback_query=False):
		if not is_callback_query:
			message = query
			if not self.id_exists_in_table("id",message.from_user.id,"users"):
				if " " in message.text:
					ref_data = message.text.split()[1]
					if ref_data[0] == "o":
						ref_data = ref_data.split("o")[1]
						inst_id = int(ref_data)
						inst_name = self.sql.get_institution_info_by_id(inst_id)['institution_name']
						self.bot.send_message(user_id, parse_mode = "HTML",
							text = f"–¢–µ–ø–µ—Ä—å –≤—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä <b>{inst_name}</b>!")
						self.bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω.")
						# —Ç—É—Ç –Ω—É–∂–µ–Ω sql	
					elif ref_data[0] == "u"
						ref_data = ref_data.split("u")
						inst_id = int(ref_data[1])
						user_id = int(ref_data[0])
						inst_name = self.sql.get_institution_info_by_id(inst_id)['institution_name']
						self.bot.send_message(user_id, parse_mode = "HTML",
							text = f"–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ <b>{inst_name}</b>!\n –ò–º—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞:<b>{user_name}</b>")
						self.bot.send_message(message.chat.id, f"–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∫ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é <b>{inst_name}</b>",
							parse_mode = "HTML")
						# —Ç—É—Ç –Ω—É–∂–µ–Ω sql
				self.sql.create_user_as(message.from_user.id, message.from_user.first_name + " " + message.from_user.last_name, "customer")

			keyboard = InlineKeyboardMarkup()
			button_buy = InlineKeyboardButton(text = "–°–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data = "menu|buy")
			button_referal = InlineKeyboardButton(text = "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data = "menu|refer")
			button_about = InlineKeyboardButton(text = "–û –±–æ—Ç–µ", callback_data = "menu|about")
			keyboad.add(button_buy, button_referal)
			keyboard.add(button_about, self.button_cancel)
			self.bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{message.from_user.first_name}</b>", 
				parse_mode = "HTML", reply_markup = keyboard)
		else:
			call = query
			if call.data.startswith("menu"):
				menu_type = call.data.split("|")[1]

				if menu_type == "buy":
					keyboard = InlineKeyboardMarkup()
					button_bonus_plus = InlineKeyboardButton(text = "–ù–∞—á–∏—Å–ª–∏—Ç—å", callback_data = "bonus|plus")
					button_bonus_mins = InlineKeyboardButton(text = "–°–ø–∏—Å–∞—Ç—å", callback_data = "bonus|mins")
					keyboard.add(button_bonus_plus, button_bonus_mins)
					keyboard.add(self.button_cancel)
					self.bot.edit_message_text(chat_id = call.message.chat.id, text = "–ß—Ç–æ –≤—ã –Ω–∞–º–µ—Ä–µ–Ω—ã –¥–µ–ª–∞—Ç—å —Å –±–æ–Ω—É—Å–∞–º–∏?", 
						reply_markup = keyboard, message_id = call.message.message_id)

				elif menu_type == "refer":
					insts = #—Ç—É—Ç –Ω—É–∂–µ–Ω sql #self.sql.get_insts(call.from_user.id)
					if insts == []:
						self.bot.send_message(call.message.chat.id, "–í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∏ —Å –∫–∞–∫–∏–º–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º–∏ üö´")
					else:
						keyboard = InlineKeyboardMarkup()
						for inst in insts:
							name = self.sql.get_institution_info_by_id(inst)["institution_name"]
							keyboard.add(InlineKeyboardButton(text=name,callback_data=f"refer|{inst}"))
						keyboard.add(self.button_cancel)
						self.bot.edit_message_text(chat_id = call.message.chat.id, 
							text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:",
							reply_markup = keyboard, message_id = call.message.message_id)

				elif menu_type == "about":
					self.bot.send_message(call.message.chat.id, 
						"""
						Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
						Sed vitae ornare elit. Morbi pellentesque bibendum leo quis hendrerit. 
						Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
						""")


			elif call.data.startswith("refer"):
				inst_id = call.data.split("|")[1]
				link = f"http://t.me/cashtestback_bot?start=u{call.from_user.id}q{inst_id}"
				self.bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id,
					text = f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n{link}")


			elif call.data.startswith("bonus"):
				need_data = call.data.split("|")
				bonus_type = need_data[1]

				operation_id = self.sql.gen_random_id() 
				#—Ç—É—Ç –Ω—É–∂–µ–Ω sql

				self.bot.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id,
					text = f"–í–∞—à –∫–æ–¥: <b>{operation_id}</b>\n–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∫–∞—Å—Å–∏—Ä—É.")

	def admin_commands(self, query, is_callback_query=False):
		if not is_callback_query:
			message = query
			if self.sql.check_user(message.from_user.id):
				keyboard = InlineKeyboardMarkup()
				button_settings = InlineKeyboardButton(text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data = "settings")
				button_add_operator = InlineKeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data = "add_operator")
				button_buy = InlineKeyboardButton(text = "–°–æ–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data = "buy")
				keyboard.add(button_settings, button_add_operator)
				keyboard.add(button_buy, self.button_cancel)
				self.bot.send_message(message.chat.id,"–ú–µ–Ω—é –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:",reply_markup=keyboard)

			elif message.from_user.id in [process.get("user_id") for process in self.users_in_process]:
				for process in self.users_in_process:
					if process.get("user_id") == message.from_user.id:
						theme = process.get("item")
						break
				theme_text = theme.replace("referal","—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤").replace("reffer","—Ä–µ—Ñ—Ñ–µ—Ä–æ–≤").replace("bounus","–±–æ–Ω—É—Å–æ–≤")

				if item.startswith("buy"):
					if item == "buy":
						if not in #—Ç—É—Ç sql:
							self.bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ <b>–û—Ç–º–µ–Ω–∞</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã",
								parse_mode = "HTML")
						else:
							self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏: ")
							self.users_in_process.remove(process)
							self.users_in_process.append({"user_id":message.from_user.id, "item":"buy2", "code":message.text})
					else:
						try:
							count = int(message.text)
							inst_id = #—Ç—É—Ç –Ω—É–∂–µ–Ω sql #self.sql.get_inst_id(message.from_user.id)
							do = #—Ç—É—Ç –Ω—É–∂–Ω sql # self.sql.get_do(process['code'])
							self.sql.bonuses_to_user(self,user_id,count,inst_id,do)
							referals = #—Ç—É—Ç –Ω—É–∂–µ–Ω sql
							percent_for_referal = #—Ç—É—Ç –Ω—É–∂–µ–Ω sql
							sale = referals * percent_for_referal
							count = count / 100 * sale
							self.bot.send_message(message.chat.id, parse_mode = "HTML",
								text = f"–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —Ä–∞–≤–Ω–∞: <b>{count}</b>, —Ç–∞–∫ –∫–∞–∫ <b>{referals}</b> —Ä–µ—Ñ–µ—Ä–∞–ª")
							self.users_in_process.remove(process)
													
						except ValueError:
							self.bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>",
								parse_mode = "HTML")

				
				if message.text == "–û—Ç–º–µ–Ω–∞":
					self.bot.delete_message(chat_id = message.chat.id, message_id = message.message_id)
					self.users_in_process.remove(process)


				elif message.text not in [str(i) for i in range(1,101)]:
					self.bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>",
						parse_mode = "HTML")

				else:
					self.bot.send_message(message.chat.id, f"–í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è <b>{theme_text}</b> -- <b>{message.text}%</b>",
						parse_mode = "HTML")
					#—Ç—É—Ç –Ω—É–∂–µ–Ω sql


		else:
			call = query
			if call.data == "add_operator":
				inst_id = #—Ç—É—Ç –Ω—É–∂–µ–Ω sql #self.sql.get_inst(call.from_user.id)
				link = f"http://t.me/cashtestback_bot?start=o{inst_id}"
				self.bot.send_message(call.message.chat.id, f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤–∞—à–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{link}")

			elif call.data == "settings":
				keyboard = InlineKeyboardMarkup()
				button_referal = InlineKeyboardButton(text = "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data = "config|referal")
				button_reffer = InlineKeyboardButton(text = "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Ä–µ—Ñ—Ñ–µ—Ä—ã", callback_data = "config|reffer")
				button_bonus = InlineKeyboardButton(text = "–ë–æ–Ω—É—Å—ã", callback_data = "config|bonus")
				keyboard.add(button_referal, button_reffer)
				keyboard.add(button_bonus, self.button_cancel)
				self.bot.send_message(call.message.chat.id, "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å:", reply_markup = keyboard)

			elif call.data == "buy":
				self.users_in_process.append({"user_id":call.from_user.id, "item":"buy"})
				self.bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ")


			elif call.data.startswith("config"):
				item = call.data.split("|")[1]
				self.bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1>100")
				self.users_in_process.append({"user_id":call.from_user.id, "item":item})


